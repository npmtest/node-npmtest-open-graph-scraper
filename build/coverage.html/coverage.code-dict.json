{"/home/travis/build/npmtest/node-npmtest-open-graph-scraper/test.js":"/* istanbul instrument in package npmtest_open_graph_scraper */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-open-graph-scraper/lib.npmtest_open_graph_scraper.js":"/* istanbul instrument in package npmtest_open_graph_scraper */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_open_graph_scraper = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_open_graph_scraper = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-open-graph-scraper/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-open-graph-scraper && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_open_graph_scraper */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_open_graph_scraper\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_open_graph_scraper.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_open_graph_scraper.rollup.js'] =\n            local.assetsDict['/assets.npmtest_open_graph_scraper.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_open_graph_scraper.__dirname + '/lib.npmtest_open_graph_scraper.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-open-graph-scraper/node_modules/open-graph-scraper/app.js":"var request = require('request'),\r\n  cheerio = require('cheerio'),\r\n  charset = require('charset'),\r\n  iconv = require('iconv-lite'),\r\n  url = require('url'),\r\n  _ = require('lodash'),\r\n  jschardet = require('jschardet');\r\n\r\nmodule.exports = function (options, callback) {\r\n  return exports.info(options, callback);\r\n};\r\n\r\nvar fieldsArray = [\r\n  {\r\n    multiple: false,\r\n    property: 'og:title',\r\n    fieldName: 'ogTitle'\r\n  },\r\n  {\r\n    multiple: false,\r\n    property: 'og:type',\r\n    fieldName: 'ogType'\r\n  },\r\n  {\r\n    multiple: true,\r\n    property: 'og:image',\r\n    fieldName: 'ogImage'\r\n  },\r\n  {\r\n    multiple: true,\r\n    property: 'og:image:url',\r\n    fieldName: 'ogImageURL'\r\n  },\r\n  {\r\n    multiple: true,\r\n    property: 'og:image:secure_url',\r\n    fieldName: 'ogImageSecureURL'\r\n  },\r\n  {\r\n    multiple: true,\r\n    property: 'og:image:width',\r\n    fieldName: 'ogImageWidth'\r\n  },\r\n  {\r\n    multiple: true,\r\n    property: 'og:image:height',\r\n    fieldName: 'ogImageHeight'\r\n  },\r\n  {\r\n    multiple: true,\r\n    property: 'og:image:type',\r\n    fieldName: 'ogImageType'\r\n  },\r\n  {\r\n    multiple: false,\r\n    property: 'og:url',\r\n    fieldName: 'ogUrl'\r\n  },\r\n  {\r\n    multiple: false,\r\n    property: 'og:audio',\r\n    fieldName: 'ogAudio'\r\n  },\r\n  {\r\n    multiple: false,\r\n    property: 'og:audio:url',\r\n    fieldName: 'ogAudioURL'\r\n  },\r\n  {\r\n    multiple: false,\r\n    property: 'og:audio:secure_url',\r\n    fieldName: 'ogAudioSecureURL'\r\n  },\r\n  {\r\n    multiple: false,\r\n    property: 'og:audio:type',\r\n    fieldName: 'ogAudioType'\r\n  },\r\n  {\r\n    multiple: false,\r\n    property: 'og:description',\r\n    fieldName: 'ogDescription'\r\n  },\r\n  {\r\n    multiple: false,\r\n    property: 'og:determiner',\r\n    fieldName: 'ogDeterminer'\r\n  },\r\n  {\r\n    multiple: false,\r\n    property: 'og:locale',\r\n    fieldName: 'ogLocale'\r\n  },\r\n  {\r\n    multiple: false,\r\n    property: 'og:locale:alternate',\r\n    fieldName: 'ogLocaleAlternate'\r\n  },\r\n  {\r\n    multiple: false,\r\n    property: 'og:site_name',\r\n    fieldName: 'ogSiteName'\r\n  },\r\n  {\r\n    multiple: true,\r\n    property: 'og:video',\r\n    fieldName: 'ogVideo'\r\n  },\r\n  {\r\n    multiple: true,\r\n    property: 'og:video:url', // An alternative to 'og:video'\r\n    fieldName: 'ogVideo'\r\n  },\r\n  {\r\n    multiple: true,\r\n    property: 'og:video:secure_url',\r\n    fieldName: 'ogVideoSecureURL'\r\n  },\r\n  {\r\n    multiple: true,\r\n    property: 'og:video:width',\r\n    fieldName: 'ogVideoWidth'\r\n  },\r\n  {\r\n    multiple: true,\r\n    property: 'og:video:height',\r\n    fieldName: 'ogVideoHeight'\r\n  },\r\n  {\r\n    multiple: true,\r\n    property: 'og:video:type',\r\n    fieldName: 'ogVideoType'\r\n  },\r\n  {\r\n    multiple: false,\r\n    property: 'twitter:card',\r\n    fieldName: 'twitterCard'\r\n  },\r\n  {\r\n    multiple: false,\r\n    property: 'twitter:site',\r\n    fieldName: 'twitterSite'\r\n  },\r\n  {\r\n    multiple: false,\r\n    property: 'twitter:site:id',\r\n    fieldName: 'twitterSiteId'\r\n  },\r\n  {\r\n    multiple: false,\r\n    property: 'twitter:creator',\r\n    fieldName: 'twitterCreator'\r\n  },\r\n  {\r\n    multiple: false,\r\n    property: 'twitter:creator:id',\r\n    fieldName: 'twitterCreatorId'\r\n  },\r\n  {\r\n    multiple: false,\r\n    property: 'twitter:title',\r\n    fieldName: 'twitterTitle'\r\n  },\r\n  {\r\n    multiple: false,\r\n    property: 'twitter:description',\r\n    fieldName: 'twitterDescription'\r\n  },\r\n  {\r\n    multiple: true,\r\n    property: 'twitter:image',\r\n    fieldName: 'twitterImage'\r\n  },\r\n  {\r\n    multiple: true,\r\n    property: 'twitter:image:height',\r\n    fieldName: 'twitterImageHeight'\r\n  },\r\n  {\r\n    multiple: true,\r\n    property: 'twitter:image:width',\r\n    fieldName: 'twitterImageWidth'\r\n  },\r\n  {\r\n    multiple: true,\r\n    property: 'twitter:image:src',\r\n    fieldName: 'twitterImageSrc'\r\n  },\r\n  {\r\n    multiple: true,\r\n    property: 'twitter:image:alt',\r\n    fieldName: 'twitterImageAlt'\r\n  },\r\n  {\r\n    multiple: true,\r\n    property: 'twitter:player',\r\n    fieldName: 'twitterPlayer'\r\n  },\r\n  {\r\n    multiple: true,\r\n    property: 'twitter:player:width',\r\n    fieldName: 'twitterPlayerWidth'\r\n  },\r\n  {\r\n    multiple: true,\r\n    property: 'twitter:player:height',\r\n    fieldName: 'twitterPlayerHeight'\r\n  },\r\n  {\r\n    multiple: true,\r\n    property: 'twitter:player:stream',\r\n    fieldName: 'twitterPlayerStream'\r\n  },\r\n  {\r\n    multiple: false,\r\n    property: 'twitter:app:name:iphone',\r\n    fieldName: 'twitterAppNameiPhone'\r\n  },\r\n  {\r\n    multiple: false,\r\n    property: 'twitter:app:id:iphone',\r\n    fieldName: 'twitterAppIdiPhone'\r\n  },\r\n  {\r\n    multiple: false,\r\n    property: 'twitter:app:url:iphone',\r\n    fieldName: 'twitterAppUrliPhone'\r\n  },\r\n  {\r\n    multiple: false,\r\n    property: 'twitter:app:name:ipad',\r\n    fieldName: 'twitterAppNameiPad'\r\n  },\r\n  {\r\n    multiple: false,\r\n    property: 'twitter:app:id:ipad',\r\n    fieldName: 'twitterAppIdiPad'\r\n  },\r\n  {\r\n    multiple: false,\r\n    property: 'twitter:app:url:ipad',\r\n    fieldName: 'twitterAppUrliPad'\r\n  },\r\n  {\r\n    multiple: false,\r\n    property: 'twitter:app:name:googleplay',\r\n    fieldName: 'twitterAppNameGooglePlay'\r\n  },\r\n  {\r\n    multiple: false,\r\n    property: 'twitter:app:id:googleplay',\r\n    fieldName: 'twitterAppIdGooglePlay'\r\n  },\r\n  {\r\n    multiple: false,\r\n    property: 'twitter:app:url:googleplay',\r\n    fieldName: 'twitterAppUrlGooglePlay'\r\n  }\r\n];\r\n\r\nvar mediaMapperTwitterImage = function (item) {\r\n  return {\r\n    url: item[0],\r\n    width: item[1],\r\n    height: item[2],\r\n    alt: item[3]\r\n  };\r\n};\r\n\r\nvar mediaMapperTwitterPlayer = function (item) {\r\n  return {\r\n    url: item[0],\r\n    width: item[1],\r\n    height: item[2],\r\n    stream: item[3]\r\n  };\r\n};\r\n\r\nvar mediaMapper = function (item) {\r\n  return {\r\n    url: item[0],\r\n    width: item[1],\r\n    height: item[2],\r\n    type: item[3]\r\n  };\r\n};\r\n\r\nvar mediaSorter = function (a, b) {\r\n  if (!(a.url && b.url)) {\r\n    return 0;\r\n  }\r\n\r\n  var aRes = a.url.match(/\\.(\\w{2,5})$/),\r\n    aExt = (aRes && aRes[1].toLowerCase()) || null;\r\n  var bRes = b.url.match(/\\.(\\w{2,5})$/),\r\n    bExt = (bRes && bRes[1].toLowerCase()) || null;\r\n\r\n  if (aExt === 'gif' && bExt !== 'gif') {\r\n    return -1;\r\n  } else if (aExt !== 'gif' && bExt === 'gif') {\r\n    return 1;\r\n  } else {\r\n    return Math.max(b.width, b.height) - Math.max(a.width, a.height);\r\n  }\r\n};\r\n\r\n/*\r\n * Promised info\r\n */\r\nexports.info = function (options, callback) {\r\n  var that = this;\r\n  return new Promise(function (resolve, reject) {\r\n    var hasCallback = typeof callback === 'function';\r\n    var done = function (error, info, response) {\r\n      if (error) {\r\n        if (hasCallback) {\r\n          callback(error, info, response);\r\n        }\r\n        return reject(error, response);\r\n      }\r\n      if (hasCallback) {\r\n        callback(error, info, response);\r\n      }\r\n      return resolve(info, response);\r\n    };\r\n    that.getInfo(options, done);\r\n  })\r\n  .catch(function (error) {\r\n    if (error) console.log('Open Graph Error: ', error);\r\n    // there was a error passed back\r\n  });\r\n};\r\n\r\n/*\r\n * get info\r\n * @param string url - user input of url\r\n * @param function callback\r\n */\r\nexports.getInfo = function (options, callback) {\r\n  var error = false,\r\n    returnResult = {},\r\n    that = this;\r\n  this.validateVars(options.url, options.timeout, function (inputUrl, inputTimeout) {\r\n    if (inputUrl) {\r\n      options.url = inputUrl;\r\n      options.timeout = inputTimeout;\r\n      options.headers = Object.assign({\r\n        'user-agent': 'request.js'\r\n      }, options.headers);\r\n      options.gzip = true;\r\n      options.encoding = options.encoding || null;\r\n      if (process.browser) {\r\n        options.gzip = false;\r\n        options.protocol = url.parse(options.url).protocol;\r\n      }\r\n      that.getOG(options, function (err, results, response) {\r\n        if (results) {\r\n          returnResult = {\r\n            data: results,\r\n            success: true\r\n          };\r\n        } else {\r\n          if (err && (err.code === 'ENOTFOUND' || err.code === 'EHOSTUNREACH')) {\r\n            error = true;\r\n            returnResult = {\r\n              err: 'Page Not Found',\r\n              success: false\r\n            };\r\n          } else if (err && err.code === 'ETIMEDOUT') {\r\n            error = true;\r\n            returnResult = {\r\n              err: 'Time Out',\r\n              success: false\r\n            };\r\n          } else if (err && err === 'Must scrape an HTML page') {\r\n            error = true;\r\n            returnResult = {\r\n              err: 'Must scrape an HTML page',\r\n              success: false\r\n            };\r\n          } else {\r\n            error = true;\r\n            returnResult = {\r\n              err: 'Page Not Found',\r\n              success: false\r\n            };\r\n          }\r\n        }\r\n        callback(error, returnResult, response);\r\n      });\r\n    } else {\r\n      callback(true, {\r\n        success: false,\r\n        err: 'Invalid URL'\r\n      });\r\n    }\r\n  });\r\n};\r\n\r\n/*\r\n * validate var\r\n * @param string var - user input\r\n * @param function callback\r\n */\r\nexports.validateVars = function (inputUrl, inputTimeout, callback) {\r\n  var returnInputUrl = null,\r\n    returnInputTimeout = 2000; // time defaults to 2000ms\r\n\r\n  if (!(inputUrl === null || typeof inputUrl === 'undefined' || !inputUrl || inputUrl.length < 1)) {\r\n    returnInputUrl = this.validateUrl(inputUrl);\r\n  }\r\n\r\n  if (!(inputTimeout === null || typeof inputTimeout === 'undefined' || !inputTimeout || typeof inputTimeout !== 'number' || inputTimeout.length < 1) && this.validateTimeout(inputTimeout)) {\r\n    returnInputTimeout = inputTimeout;\r\n  }\r\n\r\n  callback(returnInputUrl, returnInputTimeout);\r\n};\r\n\r\n/*\r\n * validate url - all urls must have http:// in front of them\r\n * @param string var - the url we want to scrape\r\n * @param function callback\r\n */\r\nexports.validateUrl = function (inputUrl) {\r\n  if (!/^(f|ht)tps?:\\/\\//i.test(inputUrl)) {\r\n    inputUrl = 'http://' + inputUrl;\r\n  }\r\n  return inputUrl;\r\n};\r\n\r\n/*\r\n * validate timeout - how long should we wait for a request\r\n * @param number var - the time we want to wait\r\n * @param function callback\r\n */\r\nexports.validateTimeout = function (inputTimeout) {\r\n  if (!/^\\d{1,10}$/.test(inputTimeout)) {\r\n    return false;\r\n  }\r\n  return true;\r\n};\r\n\r\n/*\r\n * getOG - scrape that url!\r\n * @param string url - the url we want to scrape\r\n * @param function callback\r\n */\r\nexports.getOG = function (options, callback) {\r\n  var peekSize = options.peekSize || 1024;\r\n  var ogImageFallback = options.ogImageFallback === undefined ? true : options.ogImageFallback;\r\n  request(options, function (err, response, body) {\r\n    if (err) {\r\n      callback(err, null, response);\r\n    } else if (response && response.statusCode && (response.statusCode.toString().substring(0, 1) === '4' || response.statusCode.toString().substring(0, 1) === '5')) {\r\n      callback(new Error('Error from server'), null, response);\r\n    } else if (!(response && response.headers && response.headers['content-type'] && response.headers['content-type'].indexOf('text/html') !== -1)) {\r\n      callback('Must scrape an HTML page', null, response);\r\n    } else {\r\n      if (options.encoding === null) {\r\n        var char = charset(response.headers, body, peekSize) || jschardet.detect(body).encoding;\r\n        if (char) {\r\n          body = iconv.decode(body, char);\r\n        } else {\r\n          body = body.toString();\r\n        }\r\n      }\r\n      var $ = cheerio.load(body),\r\n        meta = $('meta'),\r\n        keys = Object.keys(meta),\r\n        ogObject = {};\r\n\r\n      if (options.withCharset) {\r\n        ogObject.charset = charset(response.headers, body, peekSize);\r\n      }\r\n\r\n      keys.forEach(function (key) {\r\n        if (!(meta[key].attribs && (meta[key].attribs.property || meta[key].attribs.name))) {\r\n          return;\r\n        }\r\n        var property = meta[key].attribs.property || meta[key].attribs.name,\r\n          content = meta[key].attribs.content;\r\n        fieldsArray.forEach(function (item) {\r\n          if (property === item.property) {\r\n            if (!item.multiple) {\r\n              ogObject[item.fieldName] = content;\r\n            } else if (!ogObject[item.fieldName]) {\r\n              ogObject[item.fieldName] = [content];\r\n            } else if (Array.isArray(ogObject[item.fieldName])) {\r\n              ogObject[item.fieldName].push(content);\r\n            }\r\n          }\r\n        });\r\n      });\r\n\r\n      /* Combine image/width/height/type\r\n        and sort for priority */\r\n      if (ogObject.ogImage || ogObject.ogImageWidth || ogObject.twitterImageHeight || ogObject.ogImageType) {\r\n        ogObject.ogImage = ogObject.ogImage ? ogObject.ogImage : [null];\r\n        ogObject.ogImageWidth = ogObject.ogImageWidth ? ogObject.ogImageWidth : [null];\r\n        ogObject.ogImageHeight = ogObject.ogImageHeight ? ogObject.ogImageHeight : [null];\r\n        ogObject.ogImageType = ogObject.ogImageType ? ogObject.ogImageType : [null];\r\n      }\r\n      var ogImages = _.zip(ogObject.ogImage,\r\n          ogObject.ogImageWidth,\r\n          ogObject.ogImageHeight,\r\n          ogObject.ogImageType)\r\n        .map(mediaMapper).sort(mediaSorter);\r\n\r\n      /* Combine video/width/height/type\r\n        and sort for priority */\r\n      if (ogObject.ogVideo || ogObject.ogVideoWidth || ogObject.ogVideoHeight || ogObject.ogVideoType) {\r\n        ogObject.ogVideo = ogObject.ogVideo ? ogObject.ogVideo : [null];\r\n        ogObject.ogVideoWidth = ogObject.ogVideoWidth ? ogObject.ogVideoWidth : [null];\r\n        ogObject.ogVideoHeight = ogObject.ogVideoHeight ? ogObject.ogVideoHeight : [null];\r\n        ogObject.ogVideoType = ogObject.ogVideoType ? ogObject.ogVideoType : [null];\r\n      }\r\n      var ogVideos = _.zip(ogObject.ogVideo,\r\n          ogObject.ogVideoWidth,\r\n          ogObject.ogVideoHeight,\r\n          ogObject.ogVideoType)\r\n        .map(mediaMapper).sort(mediaSorter);\r\n\r\n      /* Combine twitter image/width/height/alt\r\n        and sort for priority */\r\n      if (ogObject.twitterImageSrc || ogObject.twitterImage || ogObject.twitterImageWidth || ogObject.twitterImageHeight || ogObject.twitterImageAlt) {\r\n        ogObject.twitterImage = ogObject.twitterImage ? ogObject.twitterImage : ogObject.twitterImageSrc;\r\n        ogObject.twitterImage = ogObject.twitterImage ? ogObject.twitterImage : [null];\r\n        ogObject.twitterImageWidth = ogObject.twitterImageWidth ? ogObject.twitterImageWidth : [null];\r\n        ogObject.twitterImageHeight = ogObject.twitterImageHeight ? ogObject.twitterImageHeight : [null];\r\n        ogObject.twitterImageAlt = ogObject.twitterImageAlt ? ogObject.twitterImageAlt : [null];\r\n      }\r\n      var twitterImages = _.zip(ogObject.twitterImage,\r\n          ogObject.twitterImageWidth,\r\n          ogObject.twitterImageHeight,\r\n          ogObject.twitterImageAlt)\r\n        .map(mediaMapperTwitterImage).sort(mediaSorter);\r\n\r\n      /* Combine twitter player/width/height/stream\r\n        and sort for priority */\r\n      if (ogObject.twitterPlayer || ogObject.twitterPlayerWidth || ogObject.twitterPlayerHeight || ogObject.twitterPlayerStream) {\r\n        ogObject.twitterPlayer = ogObject.twitterPlayer ? ogObject.twitterPlayer : [null];\r\n        ogObject.twitterPlayerWidth = ogObject.twitterPlayerWidth ? ogObject.twitterPlayerWidth : [null];\r\n        ogObject.twitterPlayerHeight = ogObject.twitterPlayerHeight ? ogObject.twitterPlayerHeight : [null];\r\n        ogObject.twitterPlayerStream = ogObject.twitterPlayerStream ? ogObject.twitterPlayerStream : [null];\r\n      }\r\n      var twitterPlayers = _.zip(ogObject.twitterPlayer,\r\n          ogObject.twitterPlayerWidth,\r\n          ogObject.twitterPlayerHeight,\r\n          ogObject.twitterPlayerStream)\r\n        .map(mediaMapperTwitterPlayer).sort(mediaSorter);\r\n\r\n      // Delete temporary fields\r\n      fieldsArray.filter(function (item) {\r\n        return item.multiple;\r\n      }).forEach(function (item) {\r\n        delete ogObject[item.fieldName];\r\n      });\r\n\r\n      // Select the best image\r\n      if (ogImages.length) {\r\n        if (options.allMedia) {\r\n          ogObject.ogImage = ogImages;\r\n        } else {\r\n          ogObject.ogImage = ogImages[0];\r\n        }\r\n      }\r\n\r\n      // Select the best video\r\n      if (ogVideos.length) {\r\n        if (options.allMedia) {\r\n          ogObject.ogVideo = ogVideos;\r\n        } else {\r\n          ogObject.ogVideo = ogVideos[0];\r\n        }\r\n      }\r\n\r\n      // Select the best twitter image\r\n      if (twitterImages.length) {\r\n        if (options.allMedia) {\r\n          ogObject.twitterImage = twitterImages;\r\n        } else {\r\n          ogObject.twitterImage = twitterImages[0];\r\n        }\r\n      }\r\n\r\n      // Select the best player\r\n      if (twitterPlayers.length) {\r\n        if (options.allMedia) {\r\n          ogObject.twitterPlayer = twitterPlayers;\r\n        } else {\r\n          ogObject.twitterPlayer = twitterPlayers[0];\r\n        }\r\n      }\r\n\r\n      // Check for 'only get open graph info'\r\n      if (!options.onlyGetOpenGraphInfo) {\r\n        // Get title tag if og title was not provided\r\n        if (!ogObject.ogTitle && $('head > title').text() && $('head > title').text().length > 0) {\r\n          ogObject.ogTitle = $('head > title').text();\r\n        }\r\n        // Get meta description tag if og description was not provided\r\n        if (!ogObject.ogDescription && $('head > meta[name=\"description\"]').attr('content') && $('head > meta[name=\"description\"]').attr('content').length > 0) {\r\n          ogObject.ogDescription = $('head > meta[name=\"description\"]').attr('content');\r\n        }\r\n        // Get first image as og:image if there is no og:image tag.\r\n        if (!ogObject.ogImage && ogImageFallback) {\r\n          var supportedImageExts = ['jpg', 'jpeg', 'png'];\r\n          $('img').each(function (i, elem) {\r\n            if ($(elem).attr('src') && $(elem).attr('src').length > 0 && supportedImageExts.indexOf($(elem).attr('src').split('.').pop()) !== -1) {\r\n              ogObject.ogImage = {\r\n                url: $(elem).attr('src')\r\n              };\r\n              return false;\r\n            }\r\n          });\r\n        }\r\n      }\r\n      // console.log('ogObject',ogObject);\r\n      callback(null, ogObject, response);\r\n    }\r\n  });\r\n};\r\n"}